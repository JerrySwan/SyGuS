; Note that this is the version where every *second* person is eliminated
(set-logic NIA)

(synth-fun recfun ((a Int)) Int
    ((Start Int ((ite StartBool StartInt StartInt)))
     (StartInt Int (a 0 1 2
        (+ StartInt StartInt)
        (- StartInt StartInt)
        (* StartInt StartInt)
        (mod StartInt StartInt)
        ;(div StartInt StartInt)
        (ite StartBool StartInt StartInt)
        (recfun StartInt)))
     (StartBool Bool (
        (and StartBool StartBool)
        (or StartBool StartBool)
        (not StartBool)
        (> StartInt StartInt)
        (< StartInt StartInt)
        (= StartInt StartInt)))
    )
)


(declare-var a Int)
; recursive version:
; J(1) = 1
; J(2n) = 2J(n) - 1
; J(2n+1) = 2J(n) + 1
 ; note that problem is not typically defined for n = 0
(constraint (=> (= a 0) (= (recfun 0) 0)))
(constraint (=> (= a 1) (= (recfun 1) 1)))
;(constraint (=> (and (> a 1) (= (mod a 2) 0)) (= (recfun a) (- (* 2 (recfun (div a 2)) ) 1 ) )))
;(constraint (=> (and (> a 1) (= (mod a 2) 1)) (= (recfun a) (+ (* 2 (recfun (div a 2)) ) 1) )))

; Alternative version of constraints:
(constraint (=> (and (> a 1) (= (mod a 2) 0))
                (= (recfun (* 2 a)) (- (* 2 (recfun a)) 1) )))
(constraint (=> (and (> a 1) (= (mod a 2) 1))
                (= (recfun (+ (* 2 a) 1)) (+ (* 2 (recfun a)) 1) )))


; closed form is J(n=2^m + l) = 2l + 1, m >= 0, 0 <= l < 2^m
; in terms of n, m = floor(log2 n), l = n - 2^m = 2^(floor(log2 n))
(check-synth)

